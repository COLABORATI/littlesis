<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LsListEntity extends BaseLsListEntity
{

  protected $_isMerge = false;


  public function setMerge($bool)
  {
    $this->_isMerge = (bool) $bool;
  }
  

  public function isMerge()
  {
    return $this->_isMerge;
  }
  
  
  public function save(Doctrine_Connection $conn = null, $updateList=true, $updateEntity=true)
  {
    if ($conn == null) 
    {
      $conn = $this->_table->getConnection();
    }
   
    try
    {
      $conn->beginTransaction();
     
      $ret = parent::save($conn);
    
      if ($updateList)
      {
        $this->LsList->last_user_id = LsVersionableListener::getUserId();
        $this->LsList->updated_at = LsDate::getCurrentDateTime();
        $this->LsList->save();
      }
      
      if ($updateEntity)
      {
        $this->Entity->last_user_id = LsVersionableListener::getUserId();
        $this->Entity->updated_at = LsDate::getCurrentDateTime();
        $this->Entity->save();
      }
      
      $conn->commit();
    }
    catch (Exception $e)
    {
      $conn->rollback();
      throw $e;
    }
    
    return $ret;
  }


  public function delete(Doctrine_Connection $conn = null, $updateList=true)
  {
    if ($conn == null) 
    {
      $conn = $this->_table->getConnection();
    }
   
    try
    {
      $conn->beginTransaction();
     
      $ret = parent::delete($conn);
    
      if ($updateList)
      {
        $this->LsList->last_user_id = LsVersionableListener::getUserId();
        $this->LsList->updated_at = date('Y-m-d H:i:s');
        $this->LsList->save();
      }
      
      $conn->commit();
    }
    catch (Exception $e)
    {
      $conn->rollback();
      throw $e;
    }
    
    return $ret;
  }
  
  
  static function removeByListIdAndEntityId($listId, $entityId)
  {
    return LsDoctrineQuery::create()
      ->delete()
      ->from('LsListEntity le')
      ->where('le.list_id = ?', $listId)
      ->andWhere('le.entity_id = ?', $entityId)
      ->andWhere('le.is_deleted = 0')
      ->execute();
  }
  
  
  static function addByListIdAndEntityId($listId, $entityId)
  {
    $le = LsDoctrineQuery::create()
      ->from('LsListEntity le')
      ->where('le.list_id = ?', $listId)
      ->andWhere('le.entity_id = ?', $entityId)
      ->fetchOne();
      
    if ($le)
    {
      if ($le['is_deleted'])
      {
        $le->is_deleted = 0;
        $le->save();
      }
    }
    else    
    {
      $le = new LsListEntity;
      $le->list_id = $listId;
      $le->entity_id = $entityId;
      $le->save();
    }
    
    return $le;
  }
}