<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Note extends BaseNote
{
  protected $_alerted_user_names = array();
  protected $_alerted_user_ids = array();
  protected $_entity_ids = array();
  protected $_relationship_ids = array();
  protected $_lslist_ids = array();
  protected $_sfguardgroup_ids = array();
  protected $_network_ids = array();
  

  public function getInternalUrl()
  {
    return NoteTable::getInternalUrl($this);
  }
  
  
  public function isViewableBy(sfGuardUser $user)
  {
    $isAuthor = $user->id == $this->user_id;

    return !$this->is_private || $isAuthor || $user->hasCredential('admin') || $this->alertsUser($user);  
  }
  
  
  public function alertsUser(sfGuardUser $user)
  {
    if (!$user->Profile)
    {
      return false;
    }

    return (bool) stristr($this->alerted_user_names, ',' . $user->Profile->public_name . ',');
  }
  
  
  public function encodeBody($raw)
  {
    $this->body_raw = $raw;
    $body = NoteTable::cleanBody($raw);
    $body = NoteTable::renderUrls($body);
    $body = NoteTable::renderRecords($body);
    $body = NoteTable::renderUsers($body);
    $this->body = $body;

    $this->encodeUsers($raw);
    $this->encodeRecords($raw);

    foreach (array('alerted_user_names', 'alerted_user_ids', 'entity_ids', 'relationship_ids', 'lslist_ids', 'sfguardgroup_ids') as $field)
    {
      $tmp = '_' . $field;
      $this->$field = NoteTable::serialize($this->$tmp);
    }    
  }
  
  
  public function encodeUsers($str)
  {
    $pattern = '/(^|\s+|\()@([' . sfGuardUserProfileTable::$publicNameChars . ']{1,64})/';

    if (preg_match_all($pattern, $str, $matches))
    {
      $this->_alerted_user_names = array_diff($matches[2], array('entity', 'rel', 'list', 'group'));

      if (count($this->_alerted_user_names))
      {
        $this->_alerted_user_ids = LsDoctrineQuery::create()
          ->select('p.user_id')
          ->from('sfGuardUserProfile p')
          ->whereIn('p.public_name', $this->_alerted_user_names)
          ->fetchAll(PDO::FETCH_COLUMN);
      }
      else
      {
        $this->_alerted_user_ids = array();
      }
    }
  }

    
  public function encodeRecords($str)
  {
    //make sure this uses the same pattern as NoteTable::renderRecords()
    $pattern = '/@(entity|list|rel|group):(\d+)(\[([^\]]+)\])?/';
    $modelMap = array(
      'entity' => '_entity_ids',
      'rel' => '_relationship_ids',
      'list' => '_lslist_ids',
      'group' => '_sfguardgroup_ids'
    );
      
    if (preg_match_all($pattern, $str, $matches, PREG_SET_ORDER))
    {
      foreach ($matches as $match)
      {
        $ary = &$this->$modelMap[$match[1]];
        $ary[] = $match[2];
      }
    }
  }
  
  
  public function hasNonUsNetworks()
  {
    $networkIds = NoteTable::unserialize($this->network_ids);
    
    return count(array_diff($networkIds, array(LsListTable::US_NETWORK_ID))) > 0;
  }
  
  
  public function getNetworks($hydrationMode=Doctrine::HYDRATE_ARRAY)
  {
    if (count($networkIds = NoteTable::unserialize($this->network_ids)))
    {    
      return LsDoctrineQuery::create()
        ->from('LsList l')
        ->whereIn('l.id', $networkIds)
        ->setHydrationMode($hydrationMode)
        ->execute();
    }
    
    return array();    
  }
}