<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfGuardUserTable extends PluginsfGuardUserTable
{
  const SYSTEM_USER_ID = 1;
  const SCRAPER_USER_ID = 2;
  
  public static function getTopUsers($show_all = false)
  {

    $modifications = LsDoctrineQuery::create()   
          ->select('u.id, u.username, p.*, m.object_model, m.object_id, m.is_create, m.is_merge, count(m.id)')
          ->from('Modification m')
          ->leftJoin('m.User u')
          ->leftJoin('u.Profile p')
          ->where('u.is_super_admin = ?', 0)
          ->groupBy('u.id,m.object_model,m.object_id');
    
    if (!$show_all)
    {
      $modifications->andWhere('p.ranking_opt_out = ?', 0);    
    }
    
    $modifications = $modifications->execute();
    
    //user object
    $user_scores = array();
    $score_arr = self::$score_arr;

    foreach($modifications as $mod)
    {
      if ($mod->count)
      {
        $id = $mod->User->id;
        if (!isset($user_scores[$id]))
        {
          $user_scores[$id] = 0;
        }
        foreach($score_arr as $k => $v)
        {
          if ($mod->object_model == $k)
          {
            if (!$mod->is_delete && !$mod->is_merge)
            {
              $user_scores[$id] += $v[0] + ($mod->count - 1) * $v[1];            
            }
            break;            
          }
        }
      }
    }

    arsort($user_scores);
    $users = array();    
    $ct = 0;
    foreach($user_scores as $k => $v)
    {
      $user = Doctrine::getTable('sfGuardUser')->find($k);
      $user->score = $v;
      $users[] = $user;
      $ct++;
      if ($ct == 10)
      {
        break;
      }
    }
    
    return $users;
  }



  static function getInternalUrl($user, $action=null, $params=null)
  {
    if (!is_array($user) && !($user instanceOf sfGuardUser))
    {
      throw new Exception("Can't get internal URL for invalid user");
    }


    $paramStr = '';

    if ($params)
    {
      $params = array_diff_key($params, array_flip(array('name')));
    
      $paramStr = '&' . http_build_query($params);
    }


    if (!$action)
    {
      return '@userView?name=' . $user['Profile']['public_name'] . $paramStr;
    }

    return '@user?name=' . $user['Profile']['public_name'] . '&action=' . $action . $paramStr;
  }

  
  static function getPublicNameSearchQuery($terms)
  {
    $terms = preg_split('#\s+#', $terms);

    $q = LsDoctrineQuery::create()
      ->from('sfGuardUser u')
      ->leftJoin('u.Profile p')
      ->setHydrationMode(Doctrine::HYDRATE_ARRAY);
      
    if (!count($terms))
    {
      return $q->where('1=0');
    }
    
    foreach ($terms as $term)
    {
      $q->andWhere('p.public_name LIKE ?', '%' . $term . '%');
    }
    
    return $q;  
  }
  
  
  static function getPublicNameById($id)
  {
    $db = Doctrine_Manager::connection();
    $sql = 'SELECT public_name FROM sf_guard_user_profile p WHERE user_id = ?';
    $stmt = $db->execute($sql, array($id));
    
    return $stmt->fetch(PDO::FETCH_COLUMN);
  }
  
  
  static function getHomeNetworkId()
  {
    if ($user = sfContext::getInstance()->getUser()->getGuardUser())
    {
      return $user->Profile->home_network_id;
    }

    return null;
  }
  
  
  static function getCurrentUserId()
  {
    if ($user = sfContext::getInstance()->getUser()->getGuardUser())
    {
      return (int) $user->id;
    }
    
    return null;
  }
  
  
  static function isAdmin($id)
  {
    $db = Doctrine_Manager::connection();
    $sql = 'SELECT COUNT(*) FROM sf_guard_user_group WHERE user_id = ? AND group_id = ?';
    $stmt = $db->execute($sql, array($id, 1));
    
    if (!$stmt->fetch(PDO::FETCH_COLUMN))
    {
      $sql = 'SELECT COUNT(*) FROM sf_guard_user_permission WHERE user_id = ? AND permission_id = ?';
      $stmt = $db->execute($sql, array($id, 1));
      
      if (!$stmt->fetch(PDO::FETCH_COLUMN))
      {
        return false;
      }
    }          
  
    return true;
  }
}