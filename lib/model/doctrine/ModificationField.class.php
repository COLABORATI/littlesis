<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ModificationField extends BaseModificationField
{
  public function getFieldNameForDisplay()
  {
    $record = $this->Modification->getObject(true);
    
    if (!$record = $this->Modification->getObject(true))
    {
      return $this->field_name;
    }

    
    $class = get_class($record);
    $formObject = $record;

    if ($class == 'Entity')
    {
      if ($this->field_name == 'name')
      {
        return 'Name';
      }
    
      $data = $record->getData();
      
      if (!array_key_exists($this->field_name, $data))
      {
        if ($extension = EntityTable::getExtensionNameByFieldName($this->field_name))
        { 
          $class = $extension;
          $formObject = new $extension;
        }
      }      
    }
    elseif ($class == 'Relationship')
    {
      $data = $record->getData();
      
      if (!array_key_exists($this->field_name, $data))
      {
        if ($category = RelationshipTable::getCategoryNameByFieldName($this->field_name))
        {
          $class = $category;
        }
      }    
    }
    elseif (in_array($class, RelationshipTable::$categories))
    {
      $formObject = $record->Relationship;
    }
    
    $formClass = $class . 'Form';
    $form = new $formClass($formObject);
  
    if (isset($form[$this->field_name]) && $label = $form[$this->field_name]->renderLabel())
    {
      return $label;
    }
    
    if ($alias = $this->getFieldNameAlias())
    {
      return $alias;
    }
    
    return $this->field_name;    
  }


  public function getFieldNameAlias()
  {
    if (substr($this->field_name, -3) == '_id')
    {
      if ($name = $this->Modification->getObject(true)->getRelationAliasByFieldName($this->field_name))
      {
        return $name;
      }
    }
    
    return null;    
  }
  
  
  public function convertValueForDisplay($value)
  {
    if (is_null($value))
    {
      return '<span class="text_small">NULL</span>';
    }

    if (!$record = $this->Modification->getObject(true))
    {
      return $value;
    }


    $table = $record->getTable();

    if ($record instanceOf Entity)
    {
      $data = $record->getData();

      if (!array_key_exists($this->field_name, $data))
      {
        if ($extensionName = EntityTable::getExtensionNameByFieldName($this->field_name))
        {
          $table = Doctrine::getTable($extensionName);
        }        
      }
    }
    elseif ($record instanceOf Relationship)
    {
      $data = $record->getData();
      
      if (!array_key_exists($this->field_name, $data))
      {
        $table = Doctrine::getTable(RelationshipTable::getCategoryNameByFieldName($this->field_name));
      }
    }

    if ($alias = $this->getFieldNameAlias())
    {
      $class = $table->getRelation($alias)->getClass();
      
      if ($record = Doctrine::getTable($class)->find($value))
      {
        if ($record instanceOf Entity)
        {
          sfLoader::loadHelpers('Ls');
          return entity_link($record, null);
        }

        return $record;
      }
    }


    if (in_array($this->field_name, array('start_date', 'end_date')))
    {
      return Dateable::convertForDisplay($value);
    }

    $def = $table->getColumnDefinition($this->field_name);
    
    switch ($def['type'])
    {
      case 'integer':
        return (string) $value;
        break;
        
      case 'boolean':
        return $value ? 'yes' : 'no';
        break;        
    }
    
    
    return LsString::excerpt($value);
  }


  public function getOldValueForDisplay()
  {
    return $this->convertValueForDisplay($this->old_value);
  }


  public function getNewValueForDisplay()
  {
    return $this->convertValueForDisplay($this->new_value);
  }
}