<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ModificationFieldTable extends Doctrine_Table
{
  static function loadModification($field)
  {
    if (!isset($field['Modification']) && !$field['Modification'])
    {
      $field['Modification'] = LsDoctrineQuery::create()
        ->from('Modification m')
        ->where('m.id = ?', $field['modification_id'])
        ->setHydrationMode(Doctrine::HYDRATE_ARRAY)
        ->fetchOne();
    }
   
    return $field['Modification'];
  }

  static function getFieldNameForDisplay($field)
  {
    //load modification if not loaded
    $mod = self::loadModification($field);
    
    $columns = Doctrine::getTable($mod['object_model'])->getColumns();
    $formObject = new $mod['object_model'];
    $formClass = $mod['object_model'] . 'Form';


    if ($mod['object_model'] == 'Entity')
    {
      if ($field['field_name'] == 'name')
      {
        return 'Name';
      }
      
      if (!array_key_exists($field['field_name'], $columns))
      {
        if ($extension = EntityTable::getExtensionNameByFieldName($field['field_name']))
        { 
          $formClass = $extension . 'Form';
          $formObject = new $extension;
        }
      }      
    }
    elseif ($mod['object_model'] == 'Relationship')
    {
      if (!array_key_exists($field['field_name'], $columns))
      {
        if ($category = RelationshipTable::getCategoryNameByFieldName($field['field_name']))
        {
          $formClass = $category . 'Form';
        }
      }    
    }

    $form = new $formClass($formObject);
  
    if (isset($form[$field['field_name']]) && $label = $form[$field['field_name']]->renderLabel())
    {
      return $label;
    }
    
    if ($alias = self::getFieldNameAlias($field))
    {
      return $alias;
    }
    
    return $field['field_name']; 
  }


  static function getFieldNameAlias($field)
  {
    $mod = self::loadModification($field);

    if (substr($field['field_name'], -3) == '_id')
    {
      if ($name = LsVersionable::getRelationAliasByModelAndFieldName($mod['object_model'], $field['field_name']))
      {
        return $name;
      }
    }
    
    return null;    
  }


  static function convertValueForDisplay($value, $field, $excerpt=40)
  {
    if (is_null($value))
    {
      return 'NULL';
    }


    if (!$mod = self::loadModification($field))
    {
      return $value;
    }


    $table = Doctrine::getTable($mod['object_model']);
    $columns = $table->getColumns();

    if ($mod['object_model'] == 'Entity')
    {
      if (!array_key_exists($field['field_name'], $columns))
      {
        if ($extensionName = EntityTable::getExtensionNameByFieldName($field['field_name']))
        {
          $table = Doctrine::getTable($extensionName);
        }        
      }
    }
    elseif ($mod['object_model'] == 'Relationship')
    {
      if (!array_key_exists($field['field_name'], $columns))
      {
        $table = Doctrine::getTable(RelationshipTable::getCategoryNameByFieldName($field['field_name']));
      }
    }


    if ($alias = self::getFieldNameAlias($field))
    {
      $class = $table->getRelation($alias)->getClass();
      
      if ($record = Doctrine::getTable($class)->find($value, Doctrine::HYDRATE_ARRAY))
      {
        if ($class == 'Entity')
        {
          sfLoader::loadHelpers('Ls');
          return entity_link($record, null);
        }
        elseif ($class == 'sfGuardUser')
        {
          sfLoader::loadHelpers('Ls');
          return user_link($record);
        }

        return $record;
      }
    }


    if (in_array($field['field_name'], array('start_date', 'end_date')))
    {
      return Dateable::convertForDisplay($value);
    }

    $def = $table->getColumnDefinition($field['field_name']);
    
    switch ($def['type'])
    {
      case 'integer':
        return (float) $value;
        break;
        
      case 'boolean':
        return $value ? 'yes' : 'no';
        break;        
    }
    
    if ($excerpt)
    {
      $short = LsString::excerpt($value, $excerpt);

      return ($short == $value) ? $value : '<span title="' . strip_tags($value) . '">' . $short . '</span>';
    }
 
    return $value;
  }
}