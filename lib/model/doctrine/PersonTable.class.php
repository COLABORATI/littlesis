<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PersonTable extends Doctrine_Table
{

  static $shortFirstNames = array(
    'Ab' => 'Abner',
    'Abbie' => 'Abigail',
    'Abby' => 'Abigail',
    'Abe' => 'Abel',
    'Abe' => 'Abraham',
    'Abe' => 'Abram',
    'Acer' => 'Acera',
    'Ada' => 'Adeline',
    'Addie' => 'Adelaide',
    'Ag' => 'Agatha',
    'Aggy' => 'Agatha',
    'Agnes' => 'Agatha',
    'Agnes' => 'Inez',
    'Al' => 'Albert',
    'Al' => 'Alexander',
    'Al' => 'Alfred',
    'Alec' => 'Alexander',
    'Alex' => 'Alexander',
    'Alf' => 'Alfred',
    'Amy' => 'Amanda',
    'Amy' => 'Amelia',
    'Andy' => 'Andreas',
    'Andy' => 'Andrew',
    'Angie' => 'Angeline',
    'Ann' => 'Deanne',
    'Ann' => 'Hannah',
    'Ann' => 'Susanna',
    'Anna' => 'Hannah',
    'Anna' => 'Susanna',
    'Anne' => 'Hannah',
    'Anne' => 'Susanna',
    'Annette' => 'Ann',
    'Annette' => 'Anna',
    'Annie' => 'Ann',
    'Annie' => 'Anna',
    'Annie' => 'Hannah',
    'Annie' => 'Susanna',
    'Appy' => 'Apollonia',
    'Archy' => 'Archibald',
    'Arnie' => 'Arnold',
    'Arny' => 'Arnold',
    'Art' => 'Artemis',
    'Art' => 'Arthur',
    'Arty' => 'Arthur',
    'Bab' => 'Barbara',
    'Babs' => 'Barbara',
    'Barb' => 'Barbara',
    'Barney' => 'Barnabas',
    'Bart' => 'Bartholomew',
    'Barty' => 'Bartholomew',
    'Bass' => 'Sebastian',
    'Bea' => 'Beatta',
    'Bea' => 'Beatrice',
    'Beattie' => 'Beatrice',
    'Becky' => 'Rebecca',
    'Bella' => 'Arabella',
    'Bella' => 'Belinda',
    'Bella' => 'Elizabeth',
    'Bella' => 'Isabel',
    'Bella' => 'Isabella',
    'Bella' => 'Mirabel',
    'Belle' => 'Mabel',
    'Belle' => 'Sybil',
    'Ben' => 'Benedict',
    'Ben' => 'Benjamin',
    'Bert' => 'Delbert',
    'Bert' => 'Egbert',
    'Bertie' => 'Albert',
    'Bertie' => 'Gilbert',
    'Bess' => 'Elizabeth',
    'Bessie' => 'Elizabeth',
    'Beth' => 'Elizabeth',
    'Beto' => 'Alberto',
    'Betsy' => 'Elizabeth',
    'Betty' => 'Elizabeth',
    'Bev' => 'Beverly',
    'Bill' => 'William',
    'Bob' => 'Robert',
    'Burt' => 'Egbert',
    'Cal' => 'Caleb',
    'Cal' => 'Calvin',
    'Carol' => 'Caroline',
    'Cassie' => 'Cassandra',
    'Cathy' => 'Catherine',
    'Caty' => 'Catherine',
    'Cecily' => 'Cecilia',
    'Charlie' => 'Charles',
    'Chet' => 'Chester',
    'Chris' => 'Christian',
    'Chris' => 'Christine',
    'Chris' => 'Crystal',
    'Chuck' => 'Charles',
    'Cindy' => 'Cynthia',
    'Cindy' => 'Lucinda',
    'Cissy' => 'Cecilia',
    'Cissy' => 'Clarissa',
    'Claus' => 'Nicholas',
    'Cleat' => 'Cleatus',
    'Clem' => 'Clement',
    'Clem' => 'Clementine',
    'Cliff' => 'Clifford',
    'Cliff' => 'Clifton',
    'Clo' => 'Chloe',
    'Connie' => 'Constance',
    'Connie' => 'Cornelia',
    'Conny' => 'Cornelia',
    'Cora' => 'Corinne',
    'Corky' => 'Courtney',
    'Cory' => 'Cornelius',
    'Creasey' => 'Lucretia',
    'Crissy' => 'Christina',
    'Crissy' => 'Christine',
    'Cy' => 'Cyrus',
    'Cyndi' => 'Cynthia',
    'Daisy' => 'Margaret',
    'Dan' => 'Daniel',
    'Danny' => 'Daniel',
    'Dave' => 'David',
    'Davy' => 'David',
    'Deb' => 'Deborah',
    'Debby' => 'Deborah',
    'Dee' => 'Deanne',
    'Deedee' => 'Diedre',
    'Delia' => 'Bridget',
    'Delia' => 'Cordelia',
    'Delia' => 'Fidelia',
    'Della' => 'Delilah',
    'Derick' => 'Frederick',
    'Di' => 'Diana',
    'Di' => 'Diane',
    'Dicey' => 'Edith',
    'Dicey' => 'Elizabeth',
    'Dicey' => 'Eurydice',
    'Dick' => 'Richard',
    'Didi' => 'Diana',
    'Didi' => 'Diane',
    'Dodie' => 'Delores',
    'Dolly' => 'Dorothy',
    'Dolly' => 'Margaret',
    'Dolly' => 'Martha',
    'Dora' => 'Dorothy',
    'Dora' => 'Eudora',
    'Dora' => 'Isadora',
    'Dotty' => 'Dorothy',
    'Doug' => 'Douglas',
    'Drew' => 'Andrew',
    'Eck' => 'Alexander',
    'Ed' => 'Edmund',
    'Ed' => 'Edward',
    'Edie' => 'Edith',
    'Effie' => 'Euphemia',
    'Elaine' => 'Eleanor',
    'Eli' => 'Elijah',
    'Eli' => 'Elisha',
    'Ella' => 'Eleanor',
    'Ella' => 'Gabriella',
    'Ella' => 'Luella',
    'Ellen' => 'Eleanor',
    'Ellie' => 'Danielle',
    'Ellie' => 'Eleanor',
    'Ellie' => 'Emily',
    'Ellie' => 'Gabriella',
    'Ellie' => 'Luella',
    'Elly' => 'Eleanor',
    'Eloise' => 'Heloise',
    'Elsie' => 'Elizabeth',
    'Emily' => 'Emeline',
    'Emma' => 'Emily',
    'Eph' => 'Ephraim',
    'Erma' => 'Emily',
    'Erna' => 'Earnestine',
    'Ernie' => 'Earnest',
    'Ernie' => 'Earnestine',
    'Etta' => 'Loretta',
    'Ev' => 'Evangeline',
    'Ev' => 'Evelyn',
    'Eve' => 'Evelyn',
    'Evie' => 'Evelyn',
    'Fan' => 'Frances',
    'Fanny' => 'Frances',
    'Fanny' => 'Veronica',
    'Fay' => 'Faith',
    'Fina' => 'Josephine',
    'Flo' => 'Florence',
    'Flora' => 'Florence',
    'Flossie' => 'Florence',
    'Fran' => 'Frances',
    'Frank' => 'Franklin',
    'Frankie' => 'Frances',
    'Fred' => 'Frederick',
    'Freddie' => 'Frederick',
    'Fritz' => 'Frederick',
    'Gab' => 'Gabriel',
    'Gabby' => 'Gabrielle',
    'Gabe' => 'Gabriel',
    'Gene' => 'Eugene',
    'Genny' => 'Gwenevere',
    'Geoff' => 'Geoffrey',
    'Gerry' => 'Gerald',
    'Gus' => 'Augustus',
    'Gus' => 'Gustaf',
    'Ham' => 'Hamilton',
    'Hank' => 'Henry',
    'Hanna' => 'Johanna',
    'Hans' => 'Johan',
    'Hans' => 'Johannes',
    'Harry' => 'Henry',
    'Helen' => 'Eleanor',
    'Hester' => 'Esther',
    'Ibby' => 'Elizabeth',
    'Iggy' => 'Ignatius',
    'Issy' => 'Isabella',
    'Issy' => 'Isadora',
    'Jack' => 'John',
    'Jackie' => 'Jacqueline',
    'Jake' => 'Jacob',
    'Jan' => 'Jennifer',
    'Jane' => 'Janet',
    'Jane' => 'Virginia',
    'Jed' => 'Jedediah',
    'Jeff' => 'Jeffrey',
    'Jennifer' => 'Winifred',
    'Jenny' => 'Jennifer',
    'Jeremy' => 'Jeremiah',
    'Jerry' => 'Jeremiah',
    'Jill' => 'Julia',
    'Jim' => 'James',
    'Jimmy' => 'James',
    'Joe' => 'Joseph',
    'Joey' => 'Joseph',
    'Johnny' => 'John',
    'Jon' => 'Jonathan',
    'Josh' => 'Joshua',
    'Josie' => 'Josephine',
    'Joy' => 'Joyce',
    'Judy' => 'Judith',
    'Kate' => 'Catherine',
    'Kathy' => 'Katherine',
    'Kathy' => 'Kathlene',
    'Katie' => 'Katherine',
    'Kissy' => 'Calista',
    'Kit' => 'Christopher',
    'Kitty' => 'Catherine',
    'Klaus' => 'Nicholas',
    'Lana' => 'Eleanor',
    'Len' => 'Leonard',
    'Lena' => 'Magdalena',
    'Leno' => 'Felipe',
    'Lenora' => 'Eleanor',
    'Leo' => 'Leonard',
    'Leon' => 'Leonard',
    'Lettie' => 'Letitia',
    'Lew' => 'Lewis',
    'Libby' => 'Elizabeth',
    'Lila' => 'Delilah',
    'Lisa' => 'Elisa',
    'Liz' => 'Elizabeth',
    'Liza' => 'Elizabeth',
    'Lizzie' => 'Elizabeth',
    'Lola' => 'Delores',
    'Lorrie' => 'Lorraine',
    'Lottie' => 'Charlotte',
    'Lou' => 'Louis',
    'Louie' => 'Louis',
    'Lucy' => 'Lucille',
    'Lucy' => 'Lucinda',
    'Mabel' => 'Mehitable',
    'Maddie' => 'Madeline',
    'Maddy' => 'Madeline',
    'Madge' => 'Margaret',
    'Maggie' => 'Margaret',
    'Maggy' => 'Margaret',
    'Mame' => 'Margaret',
    'Mame' => 'Mary',
    'Mamie' => 'Margaret',
    'Mamie' => 'Mary',
    'Manda' => 'Amanda',
    'Mandy' => 'Amanda',
    'Mandy' => 'Samantha',
    'Manny' => 'Emanuel',
    'Manthy' => 'Samantha',
    'Marcy' => 'Marcia',
    'Marge' => 'Margaret',
    'Marge' => 'Marjorie',
    'Margie' => 'Margaret',
    'Margie' => 'Marjorie',
    'Marty' => 'Martha',
    'Marv' => 'Marvin',
    'Mat' => 'Mathew',
    'Matt' => 'Mathew',
    'Matt' => 'Matthias',
    'Maud' => 'Magdalene',
    'Maud' => 'Matilda',
    'Maude' => 'Magdalene',
    'Maude' => 'Matilda',
    'Maury' => 'Maurice',
    'Max' => 'Maximilian',
    'Max' => 'Maxwell',
    'May' => 'Margaret',
    'Meg' => 'Margaret',
    'Mel' => 'Melvin',
    'Mena' => 'Philomena',
    'Merv' => 'Mervin',
    'Mick' => 'Michael',
    'Mickey' => 'Michael',
    'Midge' => 'Margaret',
    'Mike' => 'Michael',
    'Millie' => 'Emeline',
    'Milly' => 'Millicent',
    'Milt' => 'Milton',
    'Mimi' => 'Mary',
    'Mimi' => 'Wilhelmina',
    'Mina' => 'Wilhelmina',
    'Mini' => 'Minerva',
    'Minnie' => 'Minerva',
    'Mira' => 'Elmira',
    'Mira' => 'Mirabel',
    'Mischa' => 'Michael',
    'Mitch' => 'Mitchell',
    'Moll' => 'Martha',
    'Moll' => 'Mary',
    'Molly' => 'Martha',
    'Molly' => 'Mary',
    'Mona' => 'Ramona',
    'Mort' => 'Mortimer',
    'Mort' => 'Morton',
    'Morty' => 'Mortimer',
    'Morty' => 'Morton',
    'Mur' => 'Muriel',
    'Myra' => 'Almira',
    'Nab' => 'Abel',
    'Nabby' => 'Abigail',
    'Nacho' => 'Ignacio',
    'Nadia' => 'Nadine',
    'Nan' => 'Ann',
    'Nan' => 'Hannah',
    'Nan' => 'Nancy',
    'Nana' => 'Ann',
    'Nana' => 'Hannah',
    'Nana' => 'Nancy',
    'Nate' => 'Nathan',
    'Nate' => 'Nathaniel',
    'Ned' => 'Edmund',
    'Ned' => 'Edward',
    'Ned' => 'Norton',
    'Neely' => 'Cornelia',
    'Neil' => 'Cornelius',
    'Neil' => 'Edward',
    'Nell' => 'Cornelia',
    'Nell' => 'Eleanor',
    'Nell' => 'Ellen',
    'Nell' => 'Helen',
    'Nellie' => 'Helen',
    'Nelly' => 'Cornelia',
    'Nelly' => 'Eleanor',
    'Nelly' => 'Helen',
    'Nessie' => 'Agnes',
    'Nettie' => 'Jeanette',
    'Netty' => 'Henrietta',
    'Nicie' => 'Eunice',
    'Nick' => 'Dominic',
    'Nick' => 'Nicholas',
    'Nicy' => 'Eunice',
    'Nikki' => 'Nicole',
    'Nina' => 'Ann',
    'Nita' => 'Anita',
    'Nita' => 'Juanita',
    'Nora' => 'Eleanor',
    'Nora' => 'Elnora',
    'Norm' => 'Norman',
    'Obed' => 'Obediah',
    'Ollie' => 'Oliver',
    'Ora' => 'Aurillia',
    'Ora' => 'Corinne',
    'Pablo' => 'Paul',
    'Pacho' => 'Francisco',
    'Paco' => 'Francisco',
    'Paddy' => 'Patrick',
    'Pam' => 'Pamela',
    'Pancho' => 'Francisco',
    'Pat' => 'Martha',
    'Pat' => 'Matilda',
    'Pat' => 'Patricia',
    'Pat' => 'Patrick',
    'Patsy' => 'Martha',
    'Patsy' => 'Matilda',
    'Patsy' => 'Patricia',
    'Patty' => 'Martha',
    'Patty' => 'Matilda',
    'Patty' => 'Patricia',
    'Peg' => 'Margaret',
    'Peggy' => 'Margaret',
    'Penny' => 'Penelope',
    'Pepa' => 'Josefa',
    'Pepe' => 'Jose',
    'Percy' => 'Percival',
    'Pete' => 'Peter',
    'Phelia' => 'Orphelia',
    'Phil' => 'Philip',
    'Polly' => 'Mary',
    'Polly' => 'Paula',
    'Prissy' => 'Priscilla',
    'Prudy' => 'Prudence',
    'Quil' => 'Aquilla',
    'Quillie' => 'Aquilla',
    'Rafe' => 'Raphael',
    'Randy' => 'Miranda',
    'Randy' => 'Randall',
    'Randy' => 'Randolph',
    'Rasmus' => 'Erasmus',
    'Ray' => 'Raymond',
    'Reba' => 'Rebecca',
    'Reg' => 'Reginald',
    'Reggie' => 'Reginald',
    'Rena' => 'Irene',
    'Rich' => 'Richard',
    'Rick' => 'Eric',
    'Rick' => 'Frederick',
    'Rick' => 'Garrick',
    'Rick' => 'Patrick',
    'Rick' => 'Richard',
    'Rita' => 'Clarita',
    'Rita' => 'Margaret',
    'Rita' => 'Margarita',
    'Rita' => 'Norita',
    'Rob' => 'Robert',
    'Rod' => 'Roderick',
    'Rod' => 'Rodney',
    'Rod' => 'Rodrigo',
    'Rodie' => 'Rhoda',
    'Ron' => 'Aaron',
    'Ron' => 'Reginald',
    'Ron' => 'Ronald',
    'Ronnie' => 'Veronica',
    'Ronny' => 'Ronald',
    'Rosie' => 'Rosalind',
    'Rosie' => 'Rosemary',
    'Rosie' => 'Rosetta',
    'Roxy' => 'Roxanne',
    'Roy' => 'Leroy',
    'Rudy' => 'Rudolph',
    'Russ' => 'Russell',
    'Sadie' => 'Sally',
    'Sadie' => 'Sarah',
    'Sal' => 'Sarah',
    'Sally' => 'Sarah',
    'Sam' => 'Samuel',
    'Sandy' => 'Alexander',
    'Sandy' => 'Sandra',
    'Sene' => 'Asenath',
    'Senga' => 'Agnes',
    'Senie' => 'Asenath',
    'Sherm' => 'Sherman',
    'Si' => 'Cyrus',
    'Si' => 'Matthias',
    'Si' => 'Silas',
    'Sibella' => 'Isabella',
    'Sid' => 'Sidney',
    'Silla' => 'Drusilla',
    'Silla' => 'Priscilla',
    'Silvie' => 'Silvia',
    'Sis' => 'Cecilia',
    'Sis' => 'Frances',
    'Sissy' => 'Cecilia',
    'Sol' => 'Solomon',
    'Stacia' => 'Eustacia',
    'Stacy' => 'Anastasia',
    'Stacy' => 'Eustacia',
    'Stan' => 'Stanislas',
    'Stan' => 'Stanly',
    'Stella' => 'Estella',
    'Stella' => 'Esther',
    'Steve' => 'Steven',
    'Steven' => 'Stephen',
    'Stew' => 'Stewart',
    'Sue' => 'Susan',
    'Sue' => 'Suzanne',
    'Sukey' => 'Suzanna',
    'Susie' => 'Susan',
    'Susie' => 'Suzanne',
    'Suzy' => 'Susan',
    'Suzy' => 'Suzanne',
    'Tad' => 'Edward',
    'Tad' => 'Thadeus',
    'Ted' => 'Edmund',
    'Ted' => 'Edward',
    'Ted' => 'Theodore',
    'Teddy' => 'Edward',
    'Teddy' => 'Theodore',
    'Telly' => 'Aristotle',
    'Terry' => 'Theresa',
    'Tess' => 'Elizabeth',
    'Tess' => 'Theresa',
    'Theo' => 'Theobald',
    'Theo' => 'Theodore',
    'Tia' => 'Antonia',
    'Tibbie' => 'Isabella',
    'Tilda' => 'Matilda',
    'Tilly' => 'Matilda',
    'Tilly' => 'Otilia',
    'Tim' => 'Timothy',
    'Timmy' => 'Timothy',
    'Tina' => 'Albertina',
    'Tina' => 'Augustina',
    'Tina' => 'Christina',
    'Tina' => 'Christine',
    'Tina' => 'Earnestine',
    'Tina' => 'Justina',
    'Tina' => 'Martina',
    'Tish' => 'Letitia',
    'Toby' => 'Tobias',
    'Tom' => 'Thomas',
    'Tony' => 'Anthony',
    'Tracy' => 'Theresa',
    'Trina' => 'Katherina',
    'Trixie' => 'Beatrice',
    'Trudi' => 'Gertrude',
    'Trudy' => 'Gertrude',
    'Ursie' => 'Ursula',
    'Ursy' => 'Ursula',
    'Vangie' => 'Evangeline',
    'Vern' => 'Vernon',
    'Vi' => 'Viola',
    'Vi' => 'Violet',
    'Vic' => 'Victor',
    'Vicky' => 'Victoria',
    'Vin' => 'Galvin',
    'Vin' => 'Vincent',
    'Vina' => 'Alvina',
    'Vina' => 'Lavina',
    'Vinny' => 'Vincent',
    'Virg' => 'Virgil',
    'Virgie' => 'Virginia',
    'Viv' => 'Vivian',
    'Vonnie' => 'Yvonne',
    'Wally' => 'Wallace',
    'Wally' => 'Walter',
    'Walt' => 'Walter',
    'Web' => 'Webster',
    'Wendy' => 'Gwendolen',
    'Wes' => 'Wesley',
    'Will' => 'William',
    'Willie' => 'Wilhelmina',
    'Willy' => 'William',
    'Winn' => 'Edwin',
    'Winnie' => 'Edwina',
    'Winnie' => 'Winifred',
    'Woody' => 'Woodrow',
    'Xina' => 'Christina',
    'Zac' => 'Isaac',
    'Zach' => 'Zachariah',
    'Zak' => 'Isaac',
    'Zeb' => 'Zebulon',
    'Zed' => 'Zedekiah',
    'Zeke' => 'Ezekiel',
    'Zena' => 'Albertina',
    'Zeph' => 'Zephaniah');
  
  static $nameParsePrefixes = array(    
    'Honorable',
    'General',
    'Lieutenant',
    'Colonel',
    'Corporal',
    'Senator',
    'Representative',
    'Minister',
    'Mr', 'Ms', 'Mrs', 'Miss', 'Dr', 'Rev', 'Hon', 'Prof', 'Rt', 'Gen', 'Adm', 'Br', 'Fr', 'Rabbi', 'Sr', 
  'Sen', 'Cpt', 'Capt', 'Cdr', 'Col', 'Amn', 'Cpl', 'Ens', 'Lt', 'Maj', 'Pvt', 'Sgt', 'Msg', 'Rep','Sir');    


  static $nameParseSuffixes = array('Jr', 'Sr', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII', 'PhD', 'Esq', 'MD',  
  'MS', 'AG', 'AC', 'CM', 'JD', 'OP', 'RN', 'DNSC', 'MPH', 'OBE', 'RPH', 'SCD', 'RET', 'USA', 'DBA', 'CBE', 'DVM', 'USN',     
  'USAF', 'EDD', 'OSB', 'MBA', 'SJD');
  
  static $commonBioWords = array(
    'graduated',
    'experience',
    'experienced',
    'career',
    'earned',
    'degree',
    'university',
    'boards',
    'board',
    'served',
    'serves',
    'appointed',
    'honorary',
    'honor',
    'service',
    'joined',
    'joining',
    'member',
    'began',
    'prior',
    'held',
    'received',
    'he',
    'she',
    'her',
    'his',
    'manages',
    'managed',
    'joining',
    'brings',
    'held',
    'responsible for',
    'leadership',
    'retired',
    'spent',
    'spending');

  // AN ENTIRELY DIFFERENT APPROACH
  // Set $consistency to true if $p1 and $p2 are coming from the same data set
  // and that data set can be assumed to be consistent (ie, same person, same name format)
  //
  static function areSame(Entity $p1, Entity $p2, $consistency=false, $reporting=false)
  {
    //FIRST WE GET THE RELEVANT VARIABLES

    //first person
    $f1 = $p1->name_first;
    $m1 = $p1->name_middle;
    $l1 = $p1->name_last;
    $d1 = new LsDate($p1->start_date);
    $b1 = $p1->summary;

    //second person
    $f2 = $p2->name_first;
    $m2 = $p2->name_middle;
    $l2 = $p2->name_last;
    $d2 = new LsDate($p2->start_date);
    $b2 = $p2->summary;


    //DEFINE CONDITIONS
    
    //lasts
    $lasts = (object) '';
    $lasts->nonempty = ($l1 && $l2);
    $lasts->match = ($l1 == $l2);
    $lasts->noninitial = ((strlen($l1) > 1) && (strlen($l2) > 1));
    $lasts->subset = (stristr($l1, $l2) || stristr($l2, $l1));
    $lasts->compatible = (!$lasts->nonempty || $lasts->subset);
    $lasts->uncommon = !in_array($l1, LsLanguage::$commonLastNames);

    //firsts
    $firsts = (object) '';
    $firsts->nonempty = ($f1 && $f2);
    $firsts->match = ($f1 == $f2);
    $firsts->noninitial = ((strlen($f1) > 1) && (strlen($f2) > 1));
    $firsts->subset = (stristr($f1, $f2) || stristr($f2, $f1));
    $firsts->compatible = (!$firsts->nonempty || $firsts->subset);
    $firsts->uncommon = !in_array($f1, LsLanguage::$commonFirstNames);

    //middles
    $middles = (object) '';
    $middles->nonempty = ($m1 && $m2);
    $middles->match = ($m1 == $m2);
    $middles->noninitial = ((strlen($m1) > 1) && (strlen($m2) > 1));
    $middles->subset = (stristr($m1, $m2) || stristr($m2, $m1));
    $middles->compatible = (!$middles->nonempty || $middles->subset);

    //dates
    $dates = (object) '';
    $dates->nonempty = (!$d1->isBlank() && !$d2->isBlank());
    $dates->match = ($dates->nonempty && (string) $d1 == (string) $d2);
    $dates->compatible = self::birthDatesAreCompatible($d1, $d2);

    //bios
    $bios = (object) '';
    $bios->nonempty = ($b1 && $b2);
    $bios->count = count(LsLanguage::getCommonPronouns($b1, $b2, 
      array_merge(
        array(
          $f1,
          $l1,
          $f2,
          $l2
        ),
        LsLanguage::$business,
        LsLanguage::$months,
        LsLanguage::$prefixes,
        LsLanguage::$schools,
        LsLanguage::$grammar
      )
    ));

    
    //REPORTING
    $report = array(
      $lasts,
      $firsts,
      $middles,
      $dates,
      $bios
    );


    //CHECK BUNDLES OF CONDITIONS FOR MATCHING
    if
    (  
      //James P Murphy, 46
      //James P Murphy, 47
      
      $lasts->match &&
      $lasts->noninitial &&
      $firsts->match &&
      $firsts->noninitial &&
      $middles->nonempty &&
      $middles->match &&
      $dates->compatible &&
      $dates->nonempty
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    if
    (
      //J Prince Murphy, 46
      //J Prince Murphy, 45
      
      $lasts->match &&
      $lasts->noninitial &&
      $firsts->nonempty &&
      $firsts->match &&
      $middles->match &&
      $middles->noninitial &&
      $dates->compatible &&
      $dates->nonempty
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }
    
    if
    (
      //Cassandra A Pumpernickle, 51
      //Cassandra Pumpernickle, 50
      
      $lasts->match &&
      $lasts->noninitial &&
      $lasts->uncommon &&
      $firsts->match &&
      $firsts->noninitial &&
      $firsts->uncommon &&
      $middles->compatible &&
      $dates->compatible &&
      $dates->nonempty
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    if
    (
      //F B Hodgepodge, 84
      //F B Hodgepodge, 83

      $lasts->match &&
      $lasts->noninitial &&
      $lasts->uncommon &&
      $firsts->nonempty &&
      $firsts->match &&
      $middles->nonempty &&
      $middles->match &&
      $dates->compatible &&
      $dates->nonempty
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    if
    (
      //Joseph Jay Frankenstein, 39
      //J Jay Frankenstein, 40
      
      $lasts->match &&
      $lasts->noninitial &&
      $lasts->uncommon &&
      $firsts->nonempty &&
      $firsts->subset &&
      $middles->match &&
      $middles->noninitial &&
      $dates->compatible &&
      $dates->nonempty
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }
    
    if
    (
      //John Brian Eppsdale, 78
      //John Brian Eppsdale
      
      $lasts->match &&
      $lasts->noninitial &&
      $lasts->uncommon &&
      $firsts->match &&
      $firsts->noninitial &&
      $middles->match &&
      $middles->noninitial &&
      $dates->compatible
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }
      
    if
    (
      //Pat Holmes, 134, mad scientist
      //Pat W Holmes, mad scientist
      
      $lasts->match &&
      $lasts->noninitial &&
      $firsts->match &&
      $firsts->noninitial &&
      $middles->compatible &&
      $dates->compatible &&
      $bios->count > 7
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    if
    (
      //G W Smith, evil dictator
      //G W Smith, evil dictator
      
      $lasts->match &&
      $lasts->noninitial &&
      $firsts->match &&
      $firsts->nonempty &&
      $middles->match &&
      $middles->nonempty &&
      $dates->compatible &&
      $bios->count > 7
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    if
    (
      //M Dondaldson, 26, silly dancer
      //M R Dondaldson, 25, silly dancer
      
      $lasts->match &&
      $lasts->noninitial &&
      $lasts->uncommon &&
      $firsts->nonempty &&
      $firsts->match &&
      $middles->compatible &&
      $dates->compatible &&
      $dates->nonempty &&
      $bios->count > 7
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }
  
    if
    (
      //Abe Gordon, 98, racist senator
      //A L Gordon, 98, racist senator
      
      $lasts->match &&
      $lasts->noninitial &&
      $firsts->nonempty &&
      $firsts->subset &&
      $middles->compatible &&
      $dates->compatible &&
      $dates->nonempty &&
      $bios->count > 7 &&
      !$consistency
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    if
    (
      //Bo Sachs, famous aviator
      //B Northrop Sachs, 29, famous aviator
      
      $lasts->match &&
      $lasts->noninitial &&
      $firsts->nonempty &&
      $firsts->subset &&
      $dates->compatible &&
      $bios->count > 15 &&
      !$consistency
    )
    {
      array_unshift($report, true);
      return $reporting ? $report : true;
    }

    array_unshift($report, false);
    return $reporting ? $report : false;
  }


  static function birthDatesAreCompatible(LsDate $d1, LsDate $d2, $maxYearDiff=1)
  {
    if ($d1->isblank() || $d2->isBlank())
    {
      return true;
    }
    elseif ( (abs($d1->getYear() - $d2->getYear()) <= $maxYearDiff) &&
             (LsLogic::areCompatible($d1->getMonth(true), $d2->getMonth(true))) &&
             (LsLogic::areCompatible($d1->getDay(true), $d2->getDay(true))) )
    {
      return true;
    }
    else
    {
      return false;
    }
  }  


  static function parseFlatName($str, $surname = null, $returnArray = false)
  {  
    $namePrefix = $nameFirst = $nameMiddle = $nameLast = $nameSuffix = $nameNick = null;
    
    //to handle multi-word last names like Van der Twerp
    $sub = null;
    if ($surname)
    {
      $sub = preg_replace('/(^(\P{L})+|(\P{L})+$)/u','',$surname);
      $sub = preg_replace('/\s+/is','_',$sub);
      $str = str_ireplace($surname,$sub,$str);
    }
    
    //trim and remove periods
    $str = trim(str_replace('.', ' ', $str));
    
    //remove extra spaces
    $str = preg_replace('/\s{2,}/',' ',$str);

    //remove anything in parentheses at the end
    $str = preg_replace('/ \([^\)]+\)/', '', $str);
    
    //get prefixes
    $prefixes = self::$nameParsePrefixes;
    while ($prefix = current($prefixes))
    {
      if ($str != ($new = preg_replace('/^' . $prefix . ' /i', '', $str)))
      {
        if (!LsArray::inArrayNoCase($prefix, LsLanguage::$commonPrefixes))
        {
          $namePrefix .= $prefix . ' ';
        }
        $str = trim($new);
        reset($prefixes);
        continue;
      }
      next($prefixes);
    }
    $namePrefix = $namePrefix ? trim($namePrefix) : null;
  
    //get suffixes
    $suffixes = self::$nameParseSuffixes;
    while ($suffix = current($suffixes))
    {
      if ($str != ($new = preg_replace('/ ' . $suffix . '$/i', '', $str)))
      {
        $nameSuffix = $suffix . ' ' . $nameSuffix;
        $str = trim($new);
        reset($suffixes);
        continue;
      }
      next($suffixes);
    }
    $nameSuffix = $nameSuffix ? trim($nameSuffix) : null;

    //remove commas left over from suffixes
    $str = trim(str_replace(',', '', $str));
  
    //find nickname in quotes
    if (preg_match('/["\']([\S]+)[\'"]/', $str, $nickFound))
    {
      $nameNick = $nickFound[1] ? $nickFound[1] : $nickFound[2];
      $str = trim(preg_replace('/["\']([\S]+)[\'"]/', '', $str));
    }

    //condense multiple spaces
    $str = preg_replace('/\s{2,}/', ' ', $str);
  
    //split into parts
    $parts = explode(' ', $str);
  
    switch (count($parts))
    {
      case 1:
        if ($namePrefix)
        {
          $nameFirst = $namePrefix;
          $nameLast = $parts[0];
          $namePrefix = null;
        }
        else if ($nameSuffix)
        {
          $nameFirst = $parts[0];
          $nameLast = $nameSuffix;
          $nameSuffix = null;
        }
        else if (strtolower($sub) == strtolower($parts[0]))
        {
          $nameLast = $parts[0];
        }
        else
        {
          $nameFirst = $parts[0];
        }
        break;

      case 2:
        $nameFirst = $parts[0];
        $nameLast = $parts[1];
        break;
      
      case 3:
        $nameFirst = $parts[0];
        $nameMiddle = $parts[1];
        $nameLast = $parts[2];
        break;
  
      default:
        $nameFirst = $parts[0];
        $nameLast = $parts[count($parts)-1];
      
        for ($n = 1; $n < count($parts)-1; $n++)
        {
          $nameMiddle .= $parts[$n] . ' ';
        }
  
        $nameMiddle = trim($nameMiddle);
        break;
    }
    
    $nameLast = str_replace('_',' ',$nameLast);
    $name = array('name_first' => $nameFirst, 'name_last' => $nameLast, 'name_middle' => $nameMiddle,
                                        'name_prefix' => $namePrefix, 'name_suffix' => $nameSuffix, 'name_nick' => $nameNick);
                                        
    foreach($name as $nk => &$nv)
    {
      if($nv && $nk != 'name_suffix' && $nk != 'name_prefix')
      {
        $nv = preg_replace('/^(\P{L})+|(\P{L})+$/u','',$nv);
        $case = LsString::checkCase($nv);
        $nv = ($case == 'upper' || $case == 'lower') ? LsLanguage::nameize($nv) : $nv;
        if ($nk != 'name_last')
        {
          $nv = LsLanguage::hgCaser($nv, false);
        }
      }
    }
    unset($nv);

    if ($returnArray)
    {
      return $name;
    }

    $person = new Entity;
    $person->addExtension('Person');
    $person->name_first = $name['name_first'];
    $person->name_middle = $name['name_middle'];
    $person->name_last = $name['name_last'];
    $person->name_nick = $name['name_nick'];
    $person->name_prefix = $name['name_prefix'];
    $person->name_suffix = $name['name_suffix'];
    return $person;
  }

  static function getSimilarQuery($e, $looseMatch=false)
  {
    if ($e['primary_ext'] != 'Person')
    {
      throw new Exception("Entity must have Person extension to get similar Persons");
    }
    
    
    if (!$e['name_last'] || !$e['name_first'])
    {
      return LsDoctrineQuery::create()->from('Entity e')->where("1 = 0");
    }
    
    $q = LsDoctrineQuery::create()
                ->from('Entity e')
                ->leftJoin('e.Person person')
                ->where('person.name_last = ? and e.id <> ?', array($e['name_last'], $e['id']));
      
    if ($looseMatch)
    {
      $q->addWhere('person.name_first LIKE ? OR person.name_first = ?',array(substr($e['name_first'], 0, 1) . '%', $e['name_last']));
    }
    else
    {
      $q->addWhere('person.name_first = ?', $e['name_first']);
    }
    
    if ($e['name_middle'])
    {
      if ($looseMatch || strlen($e['name_middle']) == 1)
      {
        $q->addWhere('person.name_middle LIKE ? OR person.name_middle = ? OR person.name_middle = ? OR person.name_middle IS NULL', array(substr($e['name_middle'] , 0, 1) . '%', $e['name_middle'], ''));
      }
      else
      {
        $q->addWhere('person.name_middle = ? OR person.name_middle = ? OR person.name_middle IS NULL', array($e['name_middle'], ''));
      }
    }
    
    if ($e['start_date'])
    {
      $q->addWhere('e.start_date IS NULL OR ABS(SUBSTR(e.start_date, 0, 4) - ' . $e['start_date'] . ') < 2');
    }
    
    return $q;
  }
  
  static function areNameCompatible(Entity $p1, Entity $p2)
  {
    $match = true;
    if (LsLanguage::nameize($p1->name_last) != LsLanguage::nameize($p2->name_last))
    {
      $match = false;
    }    
    
    if (strpos($p1->name_first,$p2->name_first) !== 0 && strpos($p2->name_first,$p1->name_first) !== 0)
    {
      $match = false;
    }

    if ($p1->name_middle != null && $p2->name_middle != null)
    {
      if (stripos($p1->name_middle,$p2->name_middle) !== 0 && strpos($p2->name_middle, $p1->name_middle) !== 0)
      {
        $match = false;
      }
    }   
    return $match;
  }
  
  //for names in format "Summers, Lawrence" or "Ford, William Clay Jr"
  static function parseCommaName($str, $bump_suff = true, $returnArray = false)
  {
    $nameSuffix = null;
    if ($bump_suff)
    {
      $arr = self::bumpSuffixes($str);
      $str = $arr['name'];
      $nameSuffix = $arr['suffix'];
    }
    $comma = strpos($str,',');
    if ($comma)
    {
      $last = trim(substr($str,0,$comma));
      $first = trim(substr($str,$comma+1));
      $person = self::parseFlatName($first . ' ' . $last, $last, $returnArray);  
    }
    else
    {
      $person = self::parseFlatName($str, null, $returnArray);
    }

    if ($nameSuffix)
    {
      $person['name_suffix'] = $nameSuffix;
    }

    return $person;
  }
  
  static function bumpSuffixes ($str)
  {  
    $nameSuffix = null;
    
    //trim and remove periods
    $str = trim(str_replace('.', ' ', $str));
    
    //remove extra spaces
    $str = preg_replace('/\s{2,}/',' ',$str);

    //remove anything in parentheses at the end
    $str = preg_replace('/ \([^\)]+\)/', '', $str);
    
    $suffixes = self::$nameParseSuffixes;
    while ($suffix = current($suffixes))
    {
      if ($suffix != 'V' && $str != ($new = preg_replace('/ ' . $suffix . '$/i', '', $str)))
      {
        $nameSuffix = $suffix . ' ' . $nameSuffix;
        $str = trim($new);
        reset($suffixes);
        continue;
      }
      next($suffixes);
    }
    $nameSuffix = $nameSuffix ? trim($nameSuffix) : null;
    
    return array('name' => $str, 'suffix' => $nameSuffix);
  }
 
   static function getSimilarQuery2(Entity $e)
   {
     $q = LsDoctrineQuery::create()
                ->from('Entity e')
                ->leftJoin('e.Person person')
                ->leftJoin('e.Alias a')
                ->where('person.name_last = ? and e.id <> ?', array($e->name_last,$e->id));

     $fn_arr = array($e->name_first);
      
     foreach($e->Alias as $alias)
     {
       $fn_arr[] = array_shift(explode(' ',$alias->name));
     }
      
     $fn_arr = array_unique($fn_arr);
     $first_names = array();
      
     foreach ($fn_arr as $first_name)
     {
       $alts = self::getAltFirstNames($first_name);
       $first_names = array_merge($first_names,$alts);
     }            
     
     $first_names = array_unique($first_names);
     
     foreach($first_names as &$n)
     {
       $n .= '%';
     }
     
     $nf = implode(' or ',array_fill(0,count($first_names),'person.name_first like ?'));
     $al = implode(' or ',array_fill(0,count($first_names),'a.name like ?'));
     
     $q->addWhere($nf . ' or ' . $al, array_merge($first_names,$first_names));
     
     return $q;     
   }
   
   
   public static function getAltFirstNames($first_name)
   {
      $short_names = PersonTable::$shortFirstNames;
      $alts = array();
            
      if (isset($short_names[$first_name]))
      {
        $full_first = $short_names[$first_name];
      }

      if (isset($full_first))
      {
        $alts = array_keys($short_names,$full_first);
        array_push($alts,$full_first);
      }   
      
      else
      {
        $alts = array_keys($short_names,$first_name);
      }
   
      array_push($alts,$first_name);
      return array_unique($alts);      
   }


   static function getRelatedOrgSummary($entity)
   {
      $orgNames = array();
      $options = array(
        'cat_ids' => implode(',', array(RelationshipTable::POSITION_CATEGORY, RelationshipTable::MEMBERSHIP_CATEGORY)),
        'order' => 1
      );

      $orgs = EntityApi::getRelated($entity['id'], $options);

      foreach ($orgs as $id => $org)
      {
        $orgNames[] = $org['name'];
      }

      return '(' . implode('; ', $orgNames) . ')';   
   }   
   
   
  static function getLegalName(Array $person)
  {    
    $full = $person['name_prefix'] . ' ' . 
      $person['name_first'] . ' ' . 
      $person['name_middle'] . ' ' .
      $person['name_last'] . ' ' .
      $person['name_suffix'];
    $full = trim(preg_replace("/\s+/i", ' ', $full));

    return $full;     
  }
  
  
  static function getGenderName(Array $person)
  {
    switch ($person['gender_id'])
    {
      case '1':
        return 'Female';
      case '2':
        return 'Male';
      case '3':
        return 'Other';
      default:
        return null;
    }
  }
  
  
  static function middleNamesAreCompatible($n1, $n2)
  {
    $n1 = strtolower($n1);
    $n2 = strtolower($n2);
    
    if (!$n1 || !$n2 || $n1 == $n2)
    {
      return true;
    }

    $l1 = strlen($n1);
    $l2 = strlen($n2);

    if ($l1 == 1 && strpos($n2, $n1) === 0)
    {
      return true;
    }
    
    if ($l2 == 1 && strpos($n1, $n2) === 0)
    {
      return true;
    }
    
    return false;
  }
  
  
  static function getEntityMatchingQuery(Array $person)
  {
    if (!$person['name_first'] || !$person['name_last'])
    {
      throw new Exception("Can't match name without first and last");
    }

    $q = LsDoctrineQuery::create()
      ->from('Entity e')
      ->leftJoin('e.Person p')
      ->where('p.name_last = ?', $person['name_last']);
    
    $firstNames = array($person['name_first'], substr($person['name_first'], 0, 1));
    if ($person['name_nick']) { $firstNames[] = $person['name_nick']; }
    
    $q->andWhereIn('p.name_first', $firstNames);
    
    if ($person['name_middle'])
    {
      $q->andWhere('p.name_middle IS NULL OR p.name_middle IN (?, ?)', array($person['name_middle'], substr($person['name_middle'], 0, 1)));
    }
    
    if ($person['name_suffix'])
    {
      $q->andWhere('p.name_suffix = ?', array($person['name_suffix']));
    }
    
    $q->andWhere('e.is_deleted = 0');
  
    return $q;
  }
  
  
  static function nameizePersonName($name)
  {
    $parts = preg_split('/\s+/', $name);
    $cleanParts = array();
    
    foreach ($parts as $part)
    {
      if (strlen(str_replace('.', '', $part)) > 2)
      {
        $part = LsLanguage::nameize($part);
      }
      
      $cleanParts[] = $part;
    }
    
    return implode(' ', $parts);
  }
  
  static function nameSearch($name, $sphinx = false)
  {
    $person = self::parseFlatName($name);
    if (!$sphinx)
    {
      return $person->name_first . " " . $person->name_last;
    }
    else
    {
      $first = $person->name_first;
      if (strlen($first) > 3)
      {
        $first = substr($first,0,3) . "*";
      }
      return $first . " " . $person->name_last;
    }
  }
  
  
}
