<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class OrgTable extends Doctrine_Table
{
  
  static $commonSuffixes = array(
        'Inc',
        'Incorporated',
        'Company',
        'Co',
        'Cos',
        'Corp',
        'Corporation',
        'LLP',
        'LLC',
        'LP',
        'PA',
        'Chtd',
        'Chartered',
        'Companies',
        'Bancorp',
        'Bancorporation',
        'Ins',
        'Stores',
        'Holdings',
        'Group'
  );

  static function getSimilarQuery(Entity $e, $looseMatch=false)
  {
    if (!$e->hasExtension('Org'))
    {
      throw new Exception("Entity must have Org extension to get similar Orgs");
    }
    
            
    if (!$e->name)
    {
      return Doctrine_Query::create()->where("1 = 0");
    }
    
    return LsDoctrineQuery::create()
      ->from('Entity e')
      ->where('e.primary_ext = ?', 'Org')
      ->addWhere('e.name LIKE ?', '%' . self::stripName($e->name) . '%')
      ->addWhere('e.id <> ?', $e->id);   
      
    return EntityTable::getByExtensionQuery('Org')
      ->addWhere('e.id <> ?', $e->id)
      ->addWhere('org.name LIKE ?', '%' . self::stripName($e->name) . '%');      
  }
  
  
  
  static function stripNamePunctuation($name)
  {
    $cleanName = preg_replace('/\.(?!com)/i', '', $name);
    $cleanName = str_replace(',', '', $cleanName);
    $cleanName = str_replace('"', '', $cleanName);
    $cleanName = str_replace('*', ' ', $cleanName);
    $cleanName = preg_replace(array("/\s'/s","/'\s/s"),'',$cleanName);
    $cleanName = preg_replace('/\s{2,}/', ' ', $cleanName);
    
    return trim($cleanName);
  }
  
 
  static function getNameWordsToRemove()
  {
    return array_merge(
      LsLanguage::$regions,
      LsLanguage::$geography,
      LsLanguage::$schools,
      LsLanguage::$business
    );      
  }
 
 
  static function stripName($name)
  {
    $name = self::stripNamePunctuation($name);
    
    $wordsToRemove = self::getNameWordsToRemove();
    $stripped = $name;
    
    foreach ($wordsToRemove as $word)
    {
      $stripped = preg_replace('/(^| )' . $word . '( |$)/i', '\1\2', $stripped);      
    }
    
    $stripped = preg_replace('/\s{2,}/', ' ', $stripped);
    
    return ($stripped = trim($stripped)) ? $stripped : $name;
  }
  
  static function removeSuffixes($name, $exclude = array())
  {
    $name = trim($name);
    $suffixes = OrgTable::$commonSuffixes;
    
		
		while ($suffix = current($suffixes))
		{
			if (!LsArray::inArrayNoCase($suffix, $exclude) && $name != ($new = preg_replace('/ ' . $suffix . '[\.\,]?$/i', '', $name)))
			{
				$name = trim($new);
				reset($suffixes);
				continue;
			}
			next($suffixes);
		}
		
    $name = preg_replace('/\,$/isu','',$name);
		    
		return $name;
  }
  
  static function getOrgsWithSimilarNames($name, $strict = false)
  {
    $name = trim(OrgTable::removeSuffixes($name, $exclude = array('Bancorp')));
    if (strlen($name) < 3)
    {
      return array();
    }
    
    $terms = LsQuery::splitSearchPhrase($name);
    
    $q = EntityTable::getByExtensionQuery('Org')->leftJoin('e.Alias a');
    
    $search_terms = array();
    $e = array();
    $a = array();
          
    for($i = 0; $i < count($terms); $i++)
    {
      $term = $terms[$i];
      
      if (is_array($term))
      {
        $e_temp = array();
        $a_temp = array();
        foreach ($term as $t)
        {
          $search_terms[] = $i == 0 ? $t . '%' : '%' . $t . '%';
          $e_temp[] = 'e.name like ?';
          $a_temp[] = 'a.name like ?';
        }
        $e[] = '(' . implode(' or ', $e_temp) . ')';
        $a[] = '(' . implode(' or ', $a_temp) . ')';
      }
      else
      {
        $search_terms[] = $i == 0 ? $term . '%' : '%' . $term . '%';
        $e[] = 'e.name like ?';
        $a[] = 'a.name like ?';
      }
    }

    $e = implode(' and ', $e);
    $a = implode(' and ', $a);
    
    $search_terms = array_merge($search_terms, $search_terms);
    
    $q->addWhere('(' . $e . ') or (' . $a . ')', $search_terms);
    $orgs = $q->execute();
    $org_names = array();
    $found_orgs = array();
    
    foreach($orgs as $org)
    {
      if ($org->hasSimilarName($name, $strict))
      {
        $found_orgs[] = $org;
        $org_names[] = $org->name;
      }
    }
    $org_names = array_unique($org_names);
    return $found_orgs;
  }
  
  static function getNameRegex($name)
	{
    $name = OrgTable::removeSuffixes($name);
    
    $name = LsString::escapeStringForRegex($name);
    $name = str_replace(',',',?',$name);
    $name = str_replace('\s+',',?\s+',$name);
    $name = str_replace('&','(&|\s*and\s*)',$name);
    return $name;
	}
	

  static function removeNamePunctuation($name)
  {
    $name = preg_replace('/[\.,](?!\.(com|net|org|edu))/', '', $name);

    return $name;
  }
	
		
	static function checkUrl($url, $org_name)
	{
    $ret = false;
    if (preg_match('/\/\/[^\/]+\//isu',$url,$match))
    {
      $url = $match[0];
    }
    $parts = LsString::split($org_name);

    $all = '';
    $no_common ='';
    $no_corp = '';
    $stripped = '';
    
    $common = array('and','the','of','in','at','&');
    $abbrevs = array('Corporation','Inc','Group','LLC','LLP','Corp','Co','Cos','LP','PA','Dept','Department','International','Administration');
    $both = array_merge($common, $abbrevs);    
    
    foreach($parts as $part)
    {
      if (!LsArray::inArrayNoCase($part,$common)) $no_common .= $part[0];
      if (!LsArray::inArrayNoCase($part,$abbrevs)) $no_corp .= $part[0];
      if (!LsArray::inArrayNoCase($part,$both)) $stripped .= $part[0];
      $all .= $part[0];

      if (stristr($url,$part) && strlen($part) > 1 && !LsArray::inArrayNoCase($part,$both))
      {
        $ret = true;
      }
    }
    
    if ($ret == false)
    {
      if (strlen($all) > 2 && stristr($url,$all)) $ret = true;
      if (strlen($no_common) > 2 && stristr($url,$no_common)) $ret = true;
      if (strlen($no_corp) > 2  && stristr($url,$no_corp)) $ret = true;
    }
      
    return $ret;
	}
	
	static function nameSearch($name)
	{
	  //$common = array('and','the','of','in','at','&');
	  $name = self::removeSuffixes($name);
	  $name = preg_replace('/((\b(and|the|in|at|&)\b)|(\(.*\)))/is'," ",$name);
	  return $name;
	}
   
   
  static function getPersonsWithPositions($id)
  {
    $db = LsDb::getDbConnection();
    $sql = "SELECT e.* FROM entity e " .
           "LEFT JOIN link l ON (l.entity1_id = e.id) " . 
           "WHERE l.entity2_id = ? AND l.is_reverse = 0 AND e.primary_ext = ? AND e.is_deleted = 0 " .
           "GROUP BY e.id";
    $params = array($id, 'Person');
    $stmt = $db->execute($sql, $params);

    return $stmt->fetchAll(PDO::FETCH_ASSOC);
  }   
}
