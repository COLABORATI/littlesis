<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ReferenceTable extends Doctrine_Table
{
  static function generateS3path($source)
  {
    return "references" . DIRECTORY_SEPARATOR . sha1($source);
  }
  

  static function generateS3Url($folder, $source)
  {
    return (strpos('/sf', $source) === 0) ? $source :
      sfConfig::get('app_amazon_s3_base') . DIRECTORY_SEPARATOR .
      sfConfig::get('app_amazon_s3_bucket') . DIRECTORY_SEPARATOR .
      $folder . DIRECTORY_SEPARATOR .
      sha1($source);
  }


  static function getDisplayName($ref)
  {
    if ($ref['name'])
    {
      $display = $ref['name'];
    }
    else  
    {
      $display = $ref['source'];
    }

    if ($ref['publication_date'])
    {
      $display .= ', ' . Dateable::convertForDisplay($ref['publication_date']);
    }

    if ($ref['source_detail'])
    {
      $display .= ' (' . $ref['source_detail'] . ')';
    }

    return $display;
  }


  static function consolidate(Array $refs)
  {
    $tmpRefs = array();
    $uniqueRefs = array();

    //consolidate references
    foreach ($refs as $ref)
    {
      if (!isset($tmpRefs[$ref['source']]))
      {
        $tmpRefs[$ref['source']] = array($ref['name']);
        $uniqueRefs[] = $ref;
      }
      else
      {
        if (!in_array($ref['name'], $tmpRefs[$ref['source']]))
        {
          $tmpRefs[$ref['source']][] = $ref['name'];
          $uniqueRefs[] = $ref;
        }
      }
    }

    return $uniqueRefs;  
  } 
  
  
  static function getByModelAndId($model, $id, $hydrationMode=Doctrine::HYDRATE_ARRAY)
  {
    return LsDoctrineQuery::create()
      ->from('Reference r')
      ->where('r.object_model = ? AND r.object_id = ?', array($model, $id))
      ->setHydrationMode($hydrationMode)
      ->execute();
  }
}