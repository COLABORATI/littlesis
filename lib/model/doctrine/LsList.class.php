<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LsList extends BaseLsList
{
  public function delete(Doctrine_Connection $conn = null)
  {
    if ($conn == null) 
    {
      $conn = $this->_table->getConnection();
    }
    
    try
    {
      $conn->beginTransaction();

      foreach ($this->_table->getTemplates() as $template)
      {
        if (method_exists($template, 'onObjectDelete'))
        {
          $template->setInvoker($this);
          $template->onObjectDelete($conn);
        }
      }

      //gotta soft delete LsListEntities, they won't cascade due to the list's SoftDelete
      $q = LsDoctrineQuery::create()
        ->delete('LsListEntity le')
        ->where('le.list_id = ?', $this->id)
        ->execute();

      $ret = parent::delete($conn);
        
      $conn->commit();
    }
    catch (Exception $e)
    {
      $conn->rollback();
      throw $e;
    }

    return $ret;
  }  


  public function setName($str)
  {
    if (strpos($str, ':') !== false)
    {
      throw new Exception("List's name field can't contain colons");
    }

    return parent::_set('name', $str);    
  }


  /**
   * Generates internal url for any Entity action
   *
   * @return string
   */
  public function getInternalUrl($action=null, Array $params=null, $hideParams=false)
  {
    return LsListTable::generateRoute($this, $action, $params, $hideParams);
  }



  public function getEntitiesByRankQuery()
  {
    if (!$this->exists())
    {
      throw new Exception("Can't get ranked Entities for a new LsList");
    }

    return LsDoctrineQuery::create()
      ->select('e.*, le.rank')
      ->from('Entity e')
      ->leftJoin('e.LsListEntity le')
      ->where('le.list_id = ?' , $this->id)
      ->orderBy('le.rank ASC');
  }
  
  
  public function getListEntitiesByRankQuery()
  {
    if (!$this->exists())
    {
      throw new Exception("Can't get ranked ListEntities for a new LsList");
    }

    $q = LsDoctrineQuery::create()
      ->from('LsListEntity le')
      ->leftJoin('le.LsList l')
      ->leftJoin('le.Entity e')
      ->leftJoin('e.Person p')
      ->where('le.list_id = ?' , $this->id);
    if ($this->is_ranked)
    {
      $q->orderBy('le.rank ASC');
    }
    //this is a hack, we should change in the future
    else
    {
      if ($this->Entity[0]->primary_ext == 'Org')
      {
        $q->orderBy('e.name ASC');
      }
      else
      {   
        $q->orderBy('p.name_last ASC');
      }
    }  
    return $q;
  }
  
  
  public function getLatestListEntity()
  {
    return LsDoctrineQuery::create()
      ->from('LsListEntity le')
      ->where('le.list_id = ?', $this->id)
      ->orderBy('le.created_at DESC')
      ->fetchOne();
  }


  public function getSecondDegreeQuery($categoryIds=null, $order=2, $secondDegreeExts=null, $secondDegreeExcludeExts=null, $firstDegreePrimaryExt=null, $orderByNum=true)
  {
    $q = LsDoctrineQuery::create()
      ->select('e2.*, GROUP_CONCAT(DISTINCT ed.name) AS exts, COUNT(DISTINCT e1.id) AS num_people, GROUP_CONCAT(DISTINCT e1.id) AS people_ids, SUM(r2.amount) AS total')
      ->from('Entity e2')
      ->leftJoin('e2.Relationship r2 ON (r2.entity' . $order . '_id = e2.id)')
      ->leftJoin('r2.Entity1 e1')
      ->leftJoin('e1.LsListEntity le')
      ->leftJoin('e2.ExtensionRecord er')
      ->leftJoin('er.Definition ed')
      ->andWhere('le.list_id = ?', $this->id)
      ->groupBy('e2.id');

    if ($orderByNum)
    {
      $q->orderBy('num_people DESC');
    }
      
    foreach ((array) $secondDegreeExts as $ext)
    {
      $q->addHaving('(exts LIKE \'' . $ext . '\' OR exts LIKE \'' . $ext . ',%\' OR exts LIKE \'%,' . $ext . '\' OR exts LIKE \'%,' . $ext . ',%\')');
    }

    foreach ((array) $secondDegreeExcludeExts as $ext)
    {
      $q->addHaving('exts NOT LIKE \'%' . $ext . '%\'');
    }

    if ($firstDegreePrimaryExt)
    {
      $q->andWhere('e1.primary_ext = ?', $firstDegreePrimaryExt);
    }
    
    if ($categoryIds)
    {
      $categoryIds = (array) $categoryIds;

      if (count($categoryIds) > 1)
      {
        $q->andWhereIn('r2.category_id', $categoryIds);
      }
      else
      {
        $q->andWhere('r2.category_id = ?', $categoryIds[0]);
      }    
    }


    return $q;
  }


  public function getMembersWithPositionsIn(Entity $org)
  {
    $q = LsDoctrineQuery::create()
      ->from('Entity e')
      ->leftJoin('e.LsListEntity le')
      ->leftJoin('e.Relationship r ON (r.entity1_id = e.id)')
      ->andWhere('le.list_id = ?', $this->id)
      ->andWhere('r.entity2_id = ?', $org->id)
      ->andWhere('r.category_id = ?', RelationshipTable::POSITION_CATEGORY);
      
    return $q->execute();
  }


  public function hasPerson()
  {
    $q = LsDoctrineQuery::create()
      ->from('Entity e')
      ->leftJoin('e.LsListEntity le')
      ->andWhere('e.primary_ext = ?', 'Person')
      ->andWhere('le.list_id = ?', $this->id);
      
    return (bool) $q->count();
  }  
  
  public function getWatchersQuery()
  {

    $q = LsDoctrineQuery::create()
      ->select('le.id')
      ->from('LsListEntity le')
      ->where('le.list_id = ?', array($this->id))
      ->addWhere('le.is_deleted IS NOT NULL');
      
    $results = $q->fetchArray();
    
    $ids = array();

    foreach ($results as $result)
    {
      $ids[] = $result['id'];
    }
    
    $q = LsDoctrineQuery::create()
        ->select('u.*, count(m.id) AS mods')
        ->from('sfGuardUser u')
        ->leftJoin('u.Profile p')
        ->leftJoin('u.Modification m')
        ->where('u.id > ? and u.is_super_admin = ? and p.watching_opt_out = ?', array(2, false, false))
        ->andWhere('m.object_model = ? and m.object_id = ?', array('LsList', $this->id));
        
     if (count($ids))
     {
       $q = $q->orWhere('m.object_model = ? and u.id > ? and u.is_super_admin = ? and p.watching_opt_out = ?', array('LsListEntity', 2, false, false))
        ->andWhereIn('m.object_id', $ids);
     }
      
     $q = $q->groupBy('u.id')
          ->orderBy('mods DESC');
        
    return $q;      
  }
}