<?php $browser = new sfWebBrowser ?>
<?php $keyString = '?_key=98d85d5aebf8c737409581592126d887e63e4bc5' ?>

<h2><a name="top">LittleSis API: Documentation</a></h2>

<p>
<a href="#license">License</a><br />
<a href="#authentication">Authentication</a><br />
<a href="#formats">Response Formats</a><br />
<a href="#compression">Response Compression</a><br />
<a href="#metadata">Response Metadata</a><br />
<a href="#status-codes">Response Status Codes</a><br />
<a href="#paging">Response Paging</a><br />
<a href="#data-structure">Data Structure Overview</a><br />
<a href="#entities">Entity Resources</a><br />
<a href="#relationships">Relationship Resources</a><br />
<a href="#lists">List Resources</a><br />
<a href="#references">Reference Resources</a><br />
<a href="#dates">Date Formats</a><br />
<a href="#caching">Caching</a>
</p>



<h3><a name="license">License</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>



<p>LittleSis.org content is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/us/">Creative Commons Attribution-ShareAlike 3.0 United States License</a>.</p>




<h3><a name="authentication">Authentication</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>


 

<p>All requests to the LittleSis API must include a valid API key, which can be obtained <?php echo link_to('here', '@register') ?>. The key should be passed as a GET parameter with the name "_key", for example: <span class="api_code">http://api.littlesis.org/entity/1.xml?_key=98d85d5aebf8c737409581592126d887e63e4bc4</span>.</p>

<p>(For convenience, the API key will be omitted from the requested URI in the examples below.)</p>

<p>A request without a valid key will produce an empty response with HTTP status code 401. API requests are limited to 10,000 per key per day, and any request that exceeds this limit will produce an empty response with HTTP status code 403.</p>


<h3><a name="formats">Response Formats</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>All responses to API requests can be formatted in XML or JSON, determined by the suffix (".xml" or ".json") of the requested URI. JSON responses are generated by directly converting the XML response into JSON using the <?php echo link_to('Zend_Json', 'http://framework.zend.com/manual/en/zend.json.html') ?> component of the Zend Framework. Some resources, such as a list's entities, are available as CSV files.</p>


<h3><a name="compression">Response Compression</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>

<p>API responses can be compressed with gzip to reduce bandwidth use and download time. To request a gzipped response, include an "Accept-Encoding: gzip" HTTP header. It's highly recommended for API clients to use this feature.</p>



<h3><a name="metadata">Response Metadata</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>Responses always include a Meta section containing the <em>valid</em> GET parameters sent with the request. For requests that accept paging parameters (see below) -- except for "second degree" Entity requests -- the Meta section will include a TotalCount value specifying the total number of results available without any paging.</p>

<p>All responses will also include a 'Ls-Execution-Time' HTTP header, which displays how long it took LittleSis to execute the request, up until the time it sent the response back to the client. This measurement can be useful for determining how much of the total response time is due solely to data transfer or network latency.</p>

<h3><a name="status-codes">Response Status Codes</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>Responses to LittleSis API requests use the following HTTP status codes:</p>

<ul>
  <li><span class="api_code">301 Moved Permanently</span> - requests for resources that have been deleted because their content has been merged with another resource; the "Location" header will point to the resource the deleted data has been merged into</li>
  <li><span class="api_code">304 Not Modified</span> - requests sent with a 'If-Modified-Since' or 'If-Match-None' header for resources that haven't changed (see <a href="#caching">Caching</a>)</li>
  <li><span class="api_code">400 Bad Request</span> - requests for resources that don't exist but aren't obvious from examining the URL (for instance, requests for a person's board members and executives)</li>
  <li><span class="api_code">401 Unauthorized</span> - requests that require but don't include a valid API key</li>
  <li><span class="api_code">403 Forbidden</span> - requests exceeding the API key's daily quota</li>
  <li><span class="api_code">404 Not Found</span> - requests for nonexistent resources</li>
  <li><span class="api_code">410 Gone</span> - requests for resources that have been deleted</span></li>
</ul>


<h3><a name="paging">Response Paging</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>Some requests may return large numbers of results and therefore accept two optional paging parameters. The "num" parameter specifies how many results to return, and the "page" parameter specifies what page of results to return. So a num of 20 and a page of 6 will show results 100-120. Only two requests -- for an Entity's "second degree" Entities, and for Entities matching search text (see more below) -- are paged by default. These parameters do not always speed up the time it takes LittleSis to query its database, but will always improve response time by limiting the amount of data transfered to the API client in the response.</p>


<h3><a name="data-structure">Data Structure Overview</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>An Entity is a record that stores the essential fields for any person or organization in LittleSis, including its name, short & long descriptions, and its primary Type (more about Types below).</p>

<p>One of the challenges for LittleSis is to match names based on incomplete data. This is compounded by the fact that a single person or organization might go by many different names. For that reason Entities have Aliases. Each Entity has one "primary" Alias, which is stored directly in the Entity's name field.</p>

<p>A Relationship is a record that stores the essential fields about a real-world connection between two Entities in LittleSis, including the Entities' LittleSis IDs and the Relationship's category, start date, and end date, and description (more about relationship categories below).</p>

<p>When querying LittleSis for Relationships, specifying the order of Entities can be helpful in narrowing the resulting data. The order of Entities in a Relationship record only matters for the Position, Education, Membership, Donation, Lobbying, and Ownership categories. For those Relationships, the following conventions apply:</p>

<ul>
  <li>Entity1 has a position within Entity2</li>
  <li>Entity1 attended school at Entity2</li>
  <li>Entity1 is a member of Entity2</li>
  <li>Entity1 made a donation to Entity2</li>
  <li>Entity1 lobbied Entity2</li>
  <li>Entity1 is an owner of Entity2</li>
</ul>

<p>One type of connection between Entities that isn't stored with Relationship records is when an Entity is a suborg of another. For example: http://littlesis.org/org/28677/White_House#childOrgs. These connections are stored using the child Entity's parent_id field.</p>

<p>Types are how LittleSis implements the <?php echo link_to('Class Table Inheritance', 'http://www.martinfowler.com/eaaCatalog/classTableInheritance.html') ?> pattern, basically a technique for reconciling object inheritance with database table non-inheritance in ORMs. Class Table Inheritance stores the *extra* fields of subclasses in their own tables in the database.</p>

<p>The important thing is that all Entities can have multiple Types, and that some Types give an Entity extra fields -- eg, the "PublicCompany" type gives an Entity a "ticker" field.</p>

<p>Similarly, Relationship categories store the *extra* fields for Relationship subclasses, except that a Relationship can only have a single category.</p>

<p>The extra fields that Types and Relationship categories store are somewhat peripheral in LittleSis, but the Types and categories themselves can be used for filtering and sorting Entities and Relationships on the frontend (see, for example: <?php echo link_to('http://littlesis.org/person/1164/Robert_E_Rubin', 'http://littlesis.org/person/1164/Robert_E_Rubin') ?>).</p>

<p>A List record is used to create informal groupings of Entities, like the "Forbes 400" or "Federal Bailout Recipients", that aren't organizations. Like Entities, Lists have names and descriptions, but List membership is stored separately from Relationships.</p>

<p>References are records for storing links to original sources that document data on LittleSis. References are required for all data entered into LittleSis, and can be retrieved for any Entity or Relationship via the API.</p>


<h3><a name="entities">Entity Resources</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>All Entity resources include basic information about the entity at the top:</p>

<ul>
  <li><span class="api_code">id:</span> the unique numerical ID assigned to the Entity in LittleSis</li>
  <li><span class="api_code">name:</span> the primary alias (not necessarily unique) of the Entity in LittleSis</li>
  <li><span class="api_code">description:</span> a short phrase or sentence describing the Entity</li>
  <li><span class="api_code">summary:</span> a longer bio or summary of the Entity</li>
  <li><span class="api_code">start_date:</span> the date when the Entity came to exist -- DOB for people, founding dates for orgs</li>
  <li><span class="api_code">end_date:</span> the date, if any, when the Entity ceased to exist</li>
  <li><span class="api_code">is_current:</span> 1 or 0, indicating whether the Entity still exists; this field is used to disambiguate whether an Entity does or doesn't exist when it's end_date is blank</li>
  <li><span class="api_code">primary_type:</span> "Person" or "Org"</li>
  <li><span class="api_code">parent_id:</span> if the Entity is a sub-organization of a parent Entity, the paren's id is stored here</li>
  <li><span class="api_code">updated_at:</span> the last time the Entity data was updated</li>
  <li><span class="api_code">uri:</span> the Entity's URL on LittleSis.org</span>
  <li><span class="api_code">api_uri:</span> the Entity's URL in the LittleSis API</span> 
</ul>  

<p>The simplest Entity resource returns only these basic fields:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_basic'], 
  'response' => $responses['entity_basic']
)) ?>

<p>There are many additional Entity fields associated with particular Entity types. Entities with the PublicCompany type, for example, have "ticker" and "sec_cik" fields (but these fields don't necessarily have a value). A complete list of type IDs, names, and fields, is available at <?php echo link_to('http://api.littlesis.org/entities/types.xml', 'http://api.littlesis.org/entities/types.xml') ?> Each Entity has a resource that returns the basic Entity fields described above, the Entity's types, the extra fields associated with those types, and the Entity's aliases:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_details'], 
  'response' => $responses['entity_details']
)) ?>

<p>Basic and detailed data can be retrieved for multiple Entities at once with a batch request. Use the "ids" parameter to specify which Entities to retrieve, and the optional "details" parameter (with a value of 1) to retrieve the extra fields associated with the Entitities' types:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_batch'], 
  'response' => $responses['entity_batch']
)) ?>

<p>An Entity's aliases also have their own resource:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_aliases'],
  'response' => $responses['entity_aliases']
)) ?>

<p>A request for an Entity's Relationships can include optional paging parameters, as well as two parameters named "cat_ids", a comma-delimited list of category IDs the resulting Relationships must have, and "order", which specifies what order the given Entity must have in the Relationship. The order of Entities in a Relationship is explained in <a href="#data-structure">Data Structure Overview</a>. The following request will retrieve Relationships in which the given Entity is entered second and the category ID is 1 (for the Position category):</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_relationships'],
  'response' => $responses['entity_relationships']
)) ?>

<p>The IDs, names, and related fields of the 10 Relationship categories are available at <?php echo link_to('http://api.littlesis.org/relationships/categories.xml', 'http://api.littlesis.org/relationships/categories.xml') ?>.</p>

<p>A request for Entities that have a relationship with the given Entity can also be limited with paging parameters and "cat_ids". Another parameter, "is_current" (set to 1 or 0), can limit the related Entities to those with current or past relationships to the given Entity:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_related'],
  'response' => $responses['entity_related']
)) ?>

<p>Note that sum of Entities returned when "is_current" is set to 1 and the number returned when "is_current" is set to 0 doesn't necessarily add up to the number returned when "is_current" is omitted, because Relationship records often don't have a value for "is_current".</p>

<p>There are three sort methods for this resource, specified by the "sort" GET parameter. The default, sorting by Entity, will return a list of Relationships grouped by related Entity, ordered by number of relationships between that related Entity and the given Entity. Sorting by "category" will return a list of Relationships grouped first by category, then by related Entity. Sorting by "relationship" will return an unsorted list of Relationships along with the related Entity for each one.</p>

<p>For organizations, you can make a request for just its board members and executives. These requests will additionally return all the relationships between the leadership members and the organization, and accepts an optional "is_current" parameter:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_leadership'],
  'response' => $responses['entity_leadership']
)) ?>

<p>For people, you can make a request for just the organizations of which they are executives and board members. These reqests will additionally return all the relationships between the person and the organization. Such requests accept optional "is_current" and "type" parameter, the latter of which limits results to organizations with the specified type (e.g. "PublicCompany"):</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_orgs'],
  'response' => $responses['entity_orgs']
)) ?>

<p>LittleSis can provide a list of all the Entities two-degrees removed by Relationships from the given Entity. The returned "second degree" Entities are bundled with the IDs of all the "first degree" (directly-related) Entities they're connected to the given Entity through. A request for second degree Entities can be made with paging parameters (the "num" parameter is set to 20 by default for this resource), as well as "cat1_ids" and "cat2_ids" parameters for specifying the categories of Relationships that the given Entity, first degree Entitiies, and second degree Entities should be connected through. Similarly, "order1" and "order2" specify the order of the given Entity in the first degree Relationship and the order of the first degree Entity in the second degree Relationship.</p>

<p>For example, to find all organizations that people who've had positions in Wal-Mart have also had positions in:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_degree2'],
  'response' => $responses['entity_degree2']
)) ?>

<p>Request a list of Lists the given Entity belongs to:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_lists'],
  'response' => $responses['entity_lists']
)) ?>

<p>Request a list of Entities that are suborganizations of the given Entity:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_childorgs'],
  'response' => $responses['entity_childorgs']
)) ?>

<p>Request a list of LittleSis images for a given Entity:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_images'],
  'response' => $responses['entity_images']
)) ?>

<p>Request the profile image for a given Entity with <span class="api_code"><a href="<?php echo $prefix ?>/entity/1/image"><?php echo $prefix ?>/entity/1/image</a></span>. If no profile image is set, a blank response with a 404 status will be returned.</p>

<p>The resource for searching for Entities by text accepts paging parameters plus three others. The "q" parameter is required and specifies the text to match. The search text can contain multiple terms separated by spaces; terms less than two characters long will be ignored. By default, Entity names and Aliases will be searched. If an optional "search_all" parameter has a value of 1, an Entity's description and summary will also be searched. The optional "type_ids" parameter limits the search results to Entities with one of the specified types.</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_search'],
  'response' => $responses['entity_search']
)) ?>

<p>Entities can be retrieved using the following third-party IDs:</p>

<ul>
  <li><span class="api_code">ticker:</span> a company's stock ticker</li>
  <li><span class="api_code">sec_cik:</span> a company's Central Index Key assigned by the SEC</li>
  <li><span class="api_code">fec_id:</span> a person or organization's FEC ID</li>
  <li><span class="api_code">bioguide_id:</span> an ID assigned to a present or former member of Congress by the Congressional Biographical Directory</li>
  <li><span class="api_code">govtrack_id:</span> an ID assigned by GovTrack.us </li>
  <li><span class="api_code">crp_id:</span> an ID assigned by the Center for Responsive Politics</li>
  <li><span class="api_code">watchdog_id:</span> an ID assigned by Watchdog.net</li>
</ul>

<p>For example:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_lookup'],
  'response' => $responses['entity_lookup']
)) ?>

<p>To find a chain of connections between two entities, use the following resource:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_chains'],
  'response' => $responses['entity_chains']
)) ?>

<p>All chains of entities from 1-4 degrees will be returned, organized by degree, with entity IDs only, and the first chain will be returned with expanded Entity data and a list of relationship IDs connecting each Entity with the one preceding it. This resource accepts optional parameters: a "cat_ids" parameter to limit the relationships to specific categories (the default is "1"), and a "page" parameter which specifies which of the found chain to expand in detail (the default is "1").</p>



<h3><a name="relationships">Relationship Resources</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>Basic info for a Relationship consists of the following fields:<p>

<ul>
  <li><span class="api_code">id:</span> the unique numerical ID assigned to this Relationship in LittleSis</li>
  <li><span class="api_code">entity1_id:</span> the ID of the first Entity in the Relationship</li>
  <li><span class="api_code">entity2_id:</span> the ID of the second Entity in the Relationship</li>
  <li><span class="api_code">category_id:</span> the category ID</li>
  <li><span class="api_code">description1:</span> Entity1 is a/the description1 of Entity2; for position and membership Relationships, description1 is the title Entity1 is given within Entity2; for education Relationships, description1 names the type of student Entity1 is within Entity2 (Undergradute, Graduate, High School, etc)</li>
  <li><span class="api_code">description2:</span> Entity2 is a/the description2 of Entity1</li>
  <li><span class="api_code">amount:</span> for donation and transaction Relationships, the amount of money transfered</li>
  <li><span class="api_code">goods:</span> for donation and transaction Relationships, the goods or services involved</li>
  <li><span class="api_code">start_date:</span> the date when the Relationship started</li>
  <li><span class="api_code">end_date:</span> the date, if any, when the Relationship ended</li>
  <li><span class="api_code">is_current:</span> 1 or 0, indicating whether the Relationship still exists; this field is used to disambiguate whether an Entity does or doesn't exist when it's end_date is blank</li>
  <li><span class="api_code">updated_at:</span> the last time the Relationship's data was updated</li>
  <li><span class="api_code">uri:</span> the Relationship's URL on LittleSis.org</span>
  <li><span class="api_code">api_uri:</span> the Relationship's URL in the LittleSis API</span> 
</ul>

<p>Like Entities, Relationships have a resource providing only this basic data:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['relationship_basic'],
  'response' => $responses['relationship_basic']
)) ?>

<p>...and a resource that also includes the fields associated with the Relationship's category:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['relationship_details'],
  'response' => $responses['relationship_details']
)) ?>

<p>A complete list of Relationship category IDs, names, and fields, is available at <?php echo link_to('http://api.littlesis.org/relationships/categories.xml', 'http://api.littlesis.org/relationships/categories.xml') ?>.</p>

<p>Basic and detailed data can be retrieved for multiple Relationships at once with a batch request. Use the "ids" parameter to specify which Relationships to retrieve, and the optional "details" parameter (with a value of 1) to retrieve the extra fields associated with the Relationships' types. If the "details" parameter is being used and the specified Relationships all have the same category, a "cat_id" parameter with the category's ID can be given to improve the response speed.</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['relationship_batch'], 
  'response' => $responses['relationship_batch']
)) ?>

<p>A list of Relationships between two Entities can be requested with an optional "cat_ids" parameter:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['relationship_search'],
  'response' => $responses['relationship_search']
)) ?>


<h3><a name="lists">List Resources</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>Basic info for a List consists of the following fields:</p>

<ul>
  <li><span class="api_code">id:</span> the unique numerical ID assigned to this List in LittleSis</li>
  <li><span class="api_code">name:</span> the name of the List in LittleSis</li>
  <li><span class="api_code">description:</span> a short description of the List</li>
  <li><span class="api_code">is_ranked:</span>1 or 0, indicating whether the List's Entities are ranked</li>
</ul>

<p>Lists have two resources, one representing the basic List data:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['list_basic'],
  'response' => $responses['list_basic']
)) ?>

<p>...and another representing the Entities that belong to the list, which, in addition to paging parameters, takes an optional "type_ids" parameter limiting the Entities returned to those having the specified Types:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['list_entities'],
  'response' => $responses['list_entities']
)) ?>

<p>A List's Entities are also available in a terse CSV format by using a ".csv" extension in the request.</p>

<p>The name and description fields of Lists can be searched for matching text:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['list_search'],
  'response' => $responses['list_search']
)) ?>


<h3><a name="references">Reference Resources</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>




<p>Reference data consists of the following fields:</p>

<ul>
  <li><span class="api_code">id:</span> the unique numerical ID assigned to this Reference in LittleSis</li>
  <li><span class="api_code">name:</span> a short descriptive title for the reference</li>
  <li><span class="api_code">source:</span> the URL referenced</li>
  <li><span class="api_code">source_detail:</span> additional information, such as a page number, narrowing the scope of the referenced document</li>
  <li><span class="api_code">source_date:</span> the date of publication of the referenced document</li>
</ul>

<p>To request References for the data in an Entity record:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_references'],
  'response' => $responses['entity_references']
)) ?>

<p>To request References for the data in a Relationship record:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['relationship_references'],
  'response' => $responses['relationship_references']
)) ?>

<p>A request for an Entity's Relationships along with the References for those Relationships accepts the same parameters (including paging) as a request for its Relationships alone:</p>

<?php include_partial('home/examplerequest', array(
  'uri' => $uris['entity_rel_references'],
  'response' => $responses['entity_rel_references']
)) ?>


<h3><a name="dates">Date Formats</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>



<p>All dates in LittleSis are stored in YYYY-MM-DD format. Sometimes date data is incomplete and only the year and month is known -- often only the year is known. A value of "2008-00-00" represents "2008", and "1999-12-00" represents "December, 1999".</p>



<h3><a name="caching">Caching</a> <a href="#top" style="font-size: 11px;">[top]</a></h3>


<p>Currently all resources are cached server-side upon request so that subsequent requests can be served speedily. Surgical cache-clearing is performed every ~10 minutes based on the LittleSis edit logs:

<ul>
  <li>When the basic (non-relationship) info about an Entity is edited, the cache for all API resources centered on that Entity will be cleared, as well as for:
    <ul>
      <li>the relationship-dependent resources for all its directly-related Entities</li>
      <li>the member entities resource for all the Lists it's a member of</li>
      <li>the child-orgs resource for its parent Entity (if it has one)</li>
    </ul>
  </li>
  <li>When a Relationship is edited, the cache for all resources centered on that Relationship will be cleared, as well as the relationship-dependent resources for both of its two Entities</li>
  <li>When a List is edited, the cache for all resources centerd on that List will be cleared, as well as the lists resource for all its member Entities</li>
  <li>When an Alias is edited, the cache for the corresponding Entity's aliases resource will be cleared</li>
  <li>When an Image is edited, the cache for the corresponding Entity's image reousrces will be cleared</li>
  <li>When a Reference tied to an Entity or Relationship is edited, the cache for that Entity or Relationship's reference resources will be cleared</li>
  <li>Search result caches for Entities, Relationships, and Lists will be cleared every ~10 minutes as needed</li>
</ul>

<p>Client-side caching is possible using the 'Last-Modified' or 'ETag' HTTP headers. All API responses include both headers. For Entities, the Last-Modified value will be set to the last time an Entity field was edited or one of its Relationships added/edited/removed. For Relationships, it will be the last time a field was edited. For Lists, the last time a field was edited or an Entity added/removed. Once an API client has retrieved a resource and stored its Last-Modified value, it can retrieve it the next time with a 'If-Modified-Since' HTTP header with that same value. The API server will then check to see if that value matches the current Last-Modified value for that resource; if so, it will return a 304 HTTP status code; if not, it will return the resource as usual. More information about using the Last-Modified header can be found <?php echo link_to('here', 'http://kb.siteground.com/article/LastModified_HTTP_header_explained.html') ?>.</p>

<p>Etag headers work similarly, but are more reliable as they don't rely on the server's (rough) calculation of when the resource was modified. The Etag header value is a hash of the full response content. If the response content is the same, the Etag is the same. After an API client has retrieved a resource and stored its Etag value, it can retreive it the next timt with a 'If-None-Match' HTTP header with the same value. The API sever will then check to see if that value matches the current Etag value for that resource; if so, it will return a 304 HTTP status code; if not, it will return the resource as usual. More information about Etags can be found <?php echo link_to('here', 'http://developer.yahoo.com/performance/rules.html#etags') ?>.</p>